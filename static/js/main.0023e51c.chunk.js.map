{"version":3,"sources":["components/MarkdownEditor.tsx","components/MarkdownPreviewer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MarkdownEditor","text","setText","className","id","style","minHeight","onChange","e","target","value","marked","setOptions","breaks","MarkdownPreviewer","dangerouslySetInnerHTML","__html","App","React","useState","marginBottom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAuBeA,G,MAhBuC,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,QAC7D,OACE,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,kBACb,sCAEF,8BAAUC,GAAG,SACXC,MAAO,CAAEC,UAAW,SACpBC,SAAU,SAAAC,GAAC,OAAIN,EAAQM,EAAEC,OAAOC,QAChCP,UAAU,YACRF,M,gBCdVU,IAAOC,WAAW,CAChBC,QAAQ,IAOV,IAceC,EAd6C,SAAC,GAAsC,IAApCb,EAAmC,EAAnCA,KAC7D,OACE,yBAAKE,UAAU,mBACb,yBAAKA,UAAU,kBACb,yCAEF,yBAAKC,GAAG,UACND,UAAU,eACVE,MAAO,CAAEC,UAAW,SACpBS,wBAAyB,CAAEC,OAAQL,IAAOV,QC+CnCgB,EArBH,WAAO,IAAD,EACQC,IAAMC,SA1Cf,g6CAyCC,mBACTlB,EADS,KACHC,EADG,KAGhB,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,YAAYE,MAAO,CAAEe,aAAc,SAAjD,wBAEA,yBAAKjB,UAAU,WACb,yBAAKA,UAAU,UACb,kBAAC,EAAD,CAAgBF,KAAMA,EAAMC,QAASA,KAEvC,yBAAKC,UAAU,UACb,kBAAC,EAAD,CAAmBF,KAAMA,SC/CjBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0023e51c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\ntype MarkdownEditorProps = {\r\n    text: string\r\n    setText: (text: string) => void\r\n}\r\n\r\nconst MarkdownEditor: React.FC<MarkdownEditorProps> = ({ text, setText }: MarkdownEditorProps) => {\r\n  return (\r\n    <div className='message is-dark'>\r\n      <div className='message-header'>\r\n        <p>Editor</p>\r\n      </div>\r\n      <textarea id='editor'\r\n        style={{ minHeight: '20rem' }}\r\n        onChange={e => setText(e.target.value)}\r\n        className='textarea'>\r\n        { text }\r\n      </textarea>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MarkdownEditor\r\n","import React from 'react'\r\nimport marked from 'marked'\r\n\r\nmarked.setOptions({\r\n  breaks: true\r\n})\r\n\r\ntype MarkdownPreviewerProps = {\r\n    text: string\r\n}\r\n\r\nconst MarkdownPreviewer: React.FC<MarkdownPreviewerProps> = ({ text }: MarkdownPreviewerProps) => {\r\n  return (\r\n    <div className='message is-dark'>\r\n      <div className='message-header'>\r\n        <p>Previewer</p>\r\n      </div>\r\n      <div id='preview'\r\n        className='message-body'\r\n        style={{ minHeight: '20rem' }}\r\n        dangerouslySetInnerHTML={{ __html: marked(text) }} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MarkdownPreviewer\r\n","import React from 'react'\nimport './App.css'\nimport MarkdownEditor from './components/MarkdownEditor'\nimport MarkdownPreviewer from './components/MarkdownPreviewer'\n\nconst initialText = `\n# Welcome to my React Markdown Previewer!\n## This is a sub-heading...\n\n[I'm an inline-style link](https://www.google.com)\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n\n\\`\\`\\`javascript\nvar s = \"JavaScript syntax highlighting\";\nalert(s);\n\\`\\`\\`\n\nInline \\`code\\` has \\`back-ticks around\\` it.\n\n1. First ordered list item\n2. Another item\n⋅⋅* Unordered sub-list. \n1. Actual numbers don't matter, just that it's a number\n⋅⋅1. Ordered sub-list\n4. And another item.\n\n⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅\n⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅\n⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n* Unordered list can use asterisks\n- Or minuses\n+ Or pluses\n\n> Blockquotes are very handy in email to emulate reply text.\n> This line is part of the same quote.\n\nEmphasis, aka italics, with *asterisks* or _underscores_.\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\nCombined emphasis with **asterisks and _underscores_**.\nStrikethrough uses two tildes. ~~Scratch this.~~\n`\n\nconst App = () => {\n  const [text, setText] = React.useState(initialText)\n\n  return (\n    <div className=\"App\">\n      <div className='container'>\n        <h1 className='is-size-1' style={{ marginBottom: '2rem' }}>Markdown Application</h1>\n\n        <div className='columns'>\n          <div className='column'>\n            <MarkdownEditor text={text} setText={setText} />\n          </div>\n          <div className='column'>\n            <MarkdownPreviewer text={text} />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bulma/css/bulma.css'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}